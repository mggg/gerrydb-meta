"""init

Revision ID: 6898afa765ca
Revises: 
Create Date: 2023-03-21 16:54:56.498038

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6898afa765ca'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('column',
    sa.Column('col_id', sa.Integer(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('canonical_ref_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_url', sa.String(length=2048), nullable=True),
    sa.Column('kind', sa.Enum('COUNT', 'PERCENT', 'CATEGORICAL', 'IDENTIFIER', 'AREA', 'OTHER', name='columnkind'), nullable=False),
    sa.Column('type', sa.Enum('FLOAT', 'INT', 'BOOL', 'STR', 'JSON', name='columntype'), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['canonical_ref_id'], ['cherrydb.column_ref.ref_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('col_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_column_canonical_ref_id'), 'column', ['canonical_ref_id'], unique=True, schema='cherrydb')
    op.create_table('column_ref',
    sa.Column('ref_id', sa.Integer(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('col_id', sa.Integer(), nullable=True),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['col_id'], ['cherrydb.column.col_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('ref_id'),
    sa.UniqueConstraint('namespace_id', 'path'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_column_ref_path'), 'column_ref', ['path'], unique=False, schema='cherrydb')
    op.create_table('locality',
    sa.Column('loc_id', sa.Integer(), nullable=False),
    sa.Column('canonical_ref_id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('default_proj', sa.Text(), nullable=True),
    sa.CheckConstraint('parent_id <> loc_id'),
    sa.ForeignKeyConstraint(['canonical_ref_id'], ['cherrydb.locality_ref.ref_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['cherrydb.locality.loc_id'], ),
    sa.PrimaryKeyConstraint('loc_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_locality_canonical_ref_id'), 'locality', ['canonical_ref_id'], unique=True, schema='cherrydb')
    op.create_table('locality_ref',
    sa.Column('ref_id', sa.Integer(), nullable=False),
    sa.Column('loc_id', sa.Integer(), nullable=True),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['loc_id'], ['cherrydb.locality.loc_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.PrimaryKeyConstraint('ref_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_locality_ref_path'), 'locality_ref', ['path'], unique=True, schema='cherrydb')
    op.create_table('user',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('email', sa.String(length=254), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_user_email'), 'user', ['email'], unique=True, schema='cherrydb')
    op.create_table('api_key',
    sa.Column('key_hash', sa.LargeBinary(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['cherrydb.user.user_id'], ),
    sa.PrimaryKeyConstraint('key_hash'),
    schema='cherrydb'
    )
    op.create_table('meta',
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['cherrydb.user.user_id'], ),
    sa.PrimaryKeyConstraint('meta_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_meta_uuid'), 'meta', ['uuid'], unique=True, schema='cherrydb')
    op.create_table('namespace',
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('public', sa.Boolean(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.PrimaryKeyConstraint('namespace_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_namespace_path'), 'namespace', ['path'], unique=True, schema='cherrydb')
    op.create_table('user_group',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.PrimaryKeyConstraint('group_id'),
    schema='cherrydb'
    )
    op.create_table('column_relation',
    sa.Column('relation_id', sa.Integer(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('expr', sa.JSON(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('relation_id'),
    sa.UniqueConstraint('namespace_id', 'name'),
    schema='cherrydb'
    )
    op.create_table('column_set',
    sa.Column('set_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('set_id'),
    sa.UniqueConstraint('path', 'namespace_id'),
    schema='cherrydb'
    )
    op.create_table('etag',
    sa.Column('etag_id', sa.Integer(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=True),
    sa.Column('table', sa.Text(), nullable=False),
    sa.Column('etag', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('etag_id'),
    sa.UniqueConstraint('namespace_id', 'table'),
    schema='cherrydb'
    )
    op.create_table('geo_import',
    sa.Column('import_id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['cherrydb.user.user_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('import_id'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_geo_import_uuid'), 'geo_import', ['uuid'], unique=True, schema='cherrydb')
    op.create_table('geo_layer',
    sa.Column('layer_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_url', sa.String(length=2048), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('layer_id'),
    sa.UniqueConstraint('path', 'namespace_id'),
    schema='cherrydb'
    )
    op.create_table('geography',
    sa.Column('geo_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('geo_id'),
    schema='cherrydb'
    )
    op.create_table('user_group_member',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['cherrydb.user_group.group_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['cherrydb.user.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'group_id'),
    schema='cherrydb'
    )
    op.create_table('user_group_scope',
    sa.Column('group_perm_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('scope', sa.Enum('NAMESPACE_READ', 'NAMESPACE_WRITE', 'NAMESPACE_WRITE_DERIVED', 'NAMESPACE_CREATE', 'LOCALITY_READ', 'LOCALITY_WRITE', 'META_READ', 'META_WRITE', 'ALL', name='scopetype'), nullable=False),
    sa.Column('namespace_group', sa.Enum('PUBLIC', 'PRIVATE', 'ALL', name='namespacegroup'), nullable=True),
    sa.Column('namespace_id', sa.Integer(), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['cherrydb.user_group.group_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('group_perm_id'),
    sa.UniqueConstraint('group_id', 'scope', 'namespace_id'),
    schema='cherrydb'
    )
    op.create_table('user_scope',
    sa.Column('user_perm_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('scope', sa.Enum('NAMESPACE_READ', 'NAMESPACE_WRITE', 'NAMESPACE_WRITE_DERIVED', 'NAMESPACE_CREATE', 'LOCALITY_READ', 'LOCALITY_WRITE', 'META_READ', 'META_WRITE', 'ALL', name='scopetype'), nullable=False),
    sa.Column('namespace_group', sa.Enum('PUBLIC', 'PRIVATE', 'ALL', name='namespacegroup'), nullable=True),
    sa.Column('namespace_id', sa.Integer(), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['cherrydb.user.user_id'], ),
    sa.PrimaryKeyConstraint('user_perm_id'),
    sa.UniqueConstraint('user_id', 'scope', 'namespace_id'),
    schema='cherrydb'
    )
    op.create_table('view_template',
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.PrimaryKeyConstraint('template_id'),
    sa.UniqueConstraint('namespace_id', 'path'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_view_template_namespace_id'), 'view_template', ['namespace_id'], unique=False, schema='cherrydb')
    op.create_index(op.f('ix_cherrydb_view_template_path'), 'view_template', ['path'], unique=False, schema='cherrydb')
    op.create_table('column_relation_member',
    sa.Column('relation_id', sa.Integer(), nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['cherrydb.column.col_id'], ),
    sa.ForeignKeyConstraint(['relation_id'], ['cherrydb.column_relation.relation_id'], ),
    sa.PrimaryKeyConstraint('relation_id', 'member_id'),
    schema='cherrydb'
    )
    op.create_table('column_set_member',
    sa.Column('set_id', sa.Integer(), nullable=False),
    sa.Column('ref_id', sa.Integer(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ref_id'], ['cherrydb.column_ref.ref_id'], ),
    sa.ForeignKeyConstraint(['set_id'], ['cherrydb.column_set.set_id'], ),
    sa.PrimaryKeyConstraint('set_id', 'ref_id'),
    schema='cherrydb'
    )
    op.create_table('column_value',
    sa.Column('val_id', sa.Integer(), nullable=False),
    sa.Column('col_id', sa.Integer(), nullable=False),
    sa.Column('geo_id', sa.Integer(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('val_float', sa.DOUBLE_PRECISION(), nullable=True),
    sa.Column('val_int', sa.BigInteger(), nullable=True),
    sa.Column('val_str', sa.Text(), nullable=True),
    sa.Column('val_bool', sa.Boolean(), nullable=True),
    sa.Column('val_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['col_id'], ['cherrydb.column.col_id'], ),
    sa.ForeignKeyConstraint(['geo_id'], ['cherrydb.geography.geo_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.PrimaryKeyConstraint('val_id'),
    sa.UniqueConstraint('col_id', 'geo_id', 'valid_from'),
    schema='cherrydb'
    )
    op.create_table('geo_hierarchy',
    sa.Column('parent_id', sa.Integer(), nullable=False),
    sa.Column('child_id', sa.Integer(), nullable=False),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('parent_id <> child_id'),
    sa.ForeignKeyConstraint(['child_id'], ['cherrydb.geography.geo_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['cherrydb.geography.geo_id'], ),
    sa.PrimaryKeyConstraint('parent_id', 'child_id'),
    schema='cherrydb'
    )
    op.create_table('geo_set_version',
    sa.Column('set_version_id', sa.Integer(), nullable=False),
    sa.Column('layer_id', sa.Integer(), nullable=False),
    sa.Column('loc_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['layer_id'], ['cherrydb.geo_layer.layer_id'], ),
    sa.ForeignKeyConstraint(['loc_id'], ['cherrydb.locality.loc_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.PrimaryKeyConstraint('set_version_id'),
    schema='cherrydb'
    )
    op.create_table('geo_version',
    sa.Column('import_id', sa.Integer(), nullable=False),
    sa.Column('geo_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('geography', geoalchemy2.types.Geography(srid=4269, from_text='ST_GeogFromText', name='geography'), nullable=False),
    sa.Column('internal_point', geoalchemy2.types.Geography(geometry_type='POINT', srid=4269, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.ForeignKeyConstraint(['geo_id'], ['cherrydb.geography.geo_id'], ),
    sa.ForeignKeyConstraint(['import_id'], ['cherrydb.geo_import.import_id'], ),
    sa.PrimaryKeyConstraint('import_id', 'geo_id'),
    schema='cherrydb'
    )
    op.create_index('idx_geo_version_geography', 'geo_version', ['geography'], unique=False, schema='cherrydb', postgresql_using='gist')
    op.create_index('idx_geo_version_internal_point', 'geo_version', ['internal_point'], unique=False, schema='cherrydb', postgresql_using='gist')
    op.create_table('view_template_version',
    sa.Column('template_version_id', sa.Integer(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_to', sa.DateTime(timezone=True), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['cherrydb.view_template.template_id'], ),
    sa.PrimaryKeyConstraint('template_version_id'),
    schema='cherrydb'
    )
    op.create_table('geo_set_member',
    sa.Column('set_version_id', sa.Integer(), nullable=False),
    sa.Column('geo_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['geo_id'], ['cherrydb.geography.geo_id'], ),
    sa.ForeignKeyConstraint(['set_version_id'], ['cherrydb.geo_set_version.set_version_id'], ),
    sa.PrimaryKeyConstraint('set_version_id', 'geo_id'),
    schema='cherrydb'
    )
    op.create_table('view',
    sa.Column('view_id', sa.Integer(), nullable=False),
    sa.Column('namespace_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('template_version_id', sa.Integer(), nullable=False),
    sa.Column('loc_id', sa.Integer(), nullable=False),
    sa.Column('layer_id', sa.Integer(), nullable=False),
    sa.Column('at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('proj', sa.Text(), nullable=True),
    sa.Column('meta_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['layer_id'], ['cherrydb.geo_layer.layer_id'], ),
    sa.ForeignKeyConstraint(['loc_id'], ['cherrydb.locality.loc_id'], ),
    sa.ForeignKeyConstraint(['meta_id'], ['cherrydb.meta.meta_id'], ),
    sa.ForeignKeyConstraint(['namespace_id'], ['cherrydb.namespace.namespace_id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['cherrydb.view_template.template_id'], ),
    sa.ForeignKeyConstraint(['template_version_id'], ['cherrydb.view_template_version.template_version_id'], ),
    sa.PrimaryKeyConstraint('view_id'),
    sa.UniqueConstraint('namespace_id', 'path'),
    schema='cherrydb'
    )
    op.create_index(op.f('ix_cherrydb_view_namespace_id'), 'view', ['namespace_id'], unique=False, schema='cherrydb')
    op.create_index(op.f('ix_cherrydb_view_path'), 'view', ['path'], unique=False, schema='cherrydb')
    op.create_table('view_template_column_member',
    sa.Column('template_version_id', sa.Integer(), nullable=False),
    sa.Column('ref_id', sa.Integer(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ref_id'], ['cherrydb.column_ref.ref_id'], ),
    sa.ForeignKeyConstraint(['template_version_id'], ['cherrydb.view_template_version.template_version_id'], ),
    sa.PrimaryKeyConstraint('template_version_id', 'ref_id'),
    schema='cherrydb'
    )
    op.create_table('view_template_column_set_member',
    sa.Column('template_version_id', sa.Integer(), nullable=False),
    sa.Column('set_id', sa.Integer(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['set_id'], ['cherrydb.column_set.set_id'], ),
    sa.ForeignKeyConstraint(['template_version_id'], ['cherrydb.view_template_version.template_version_id'], ),
    sa.PrimaryKeyConstraint('template_version_id', 'set_id'),
    schema='cherrydb'
    )
    op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.drop_table('view_template_column_set_member', schema='cherrydb')
    op.drop_table('view_template_column_member', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_view_path'), table_name='view', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_view_namespace_id'), table_name='view', schema='cherrydb')
    op.drop_table('view', schema='cherrydb')
    op.drop_table('geo_set_member', schema='cherrydb')
    op.drop_table('view_template_version', schema='cherrydb')
    op.drop_index('idx_geo_version_internal_point', table_name='geo_version', schema='cherrydb', postgresql_using='gist')
    op.drop_index('idx_geo_version_geography', table_name='geo_version', schema='cherrydb', postgresql_using='gist')
    op.drop_table('geo_version', schema='cherrydb')
    op.drop_table('geo_set_version', schema='cherrydb')
    op.drop_table('geo_hierarchy', schema='cherrydb')
    op.drop_table('column_value', schema='cherrydb')
    op.drop_table('column_set_member', schema='cherrydb')
    op.drop_table('column_relation_member', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_view_template_path'), table_name='view_template', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_view_template_namespace_id'), table_name='view_template', schema='cherrydb')
    op.drop_table('view_template', schema='cherrydb')
    op.drop_table('user_scope', schema='cherrydb')
    op.drop_table('user_group_scope', schema='cherrydb')
    op.drop_table('user_group_member', schema='cherrydb')
    op.drop_table('geography', schema='cherrydb')
    op.drop_table('geo_layer', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_geo_import_uuid'), table_name='geo_import', schema='cherrydb')
    op.drop_table('geo_import', schema='cherrydb')
    op.drop_table('etag', schema='cherrydb')
    op.drop_table('column_set', schema='cherrydb')
    op.drop_table('column_relation', schema='cherrydb')
    op.drop_table('user_group', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_namespace_path'), table_name='namespace', schema='cherrydb')
    op.drop_table('namespace', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_meta_uuid'), table_name='meta', schema='cherrydb')
    op.drop_table('meta', schema='cherrydb')
    op.drop_table('api_key', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_user_email'), table_name='user', schema='cherrydb')
    op.drop_table('user', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_locality_ref_path'), table_name='locality_ref', schema='cherrydb')
    op.drop_table('locality_ref', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_locality_canonical_ref_id'), table_name='locality', schema='cherrydb')
    op.drop_table('locality', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_column_ref_path'), table_name='column_ref', schema='cherrydb')
    op.drop_table('column_ref', schema='cherrydb')
    op.drop_index(op.f('ix_cherrydb_column_canonical_ref_id'), table_name='column', schema='cherrydb')
    op.drop_table('column', schema='cherrydb')
    # ### end Alembic commands ###
